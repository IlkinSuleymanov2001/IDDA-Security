// <auto-generated />
using System;
using Goverment.AuthApi.Repositories.Concretes.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Goverment.AuthApi.Migrations
{
    [DbContext(typeof(AuthContext))]
    partial class AuthContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Core.Security.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Name = "USER"
                        },
                        new
                        {
                            Id = 1,
                            Name = "ADMIN"
                        });
                });

            modelBuilder.Entity("Core.Security.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedTime")
                        .HasMaxLength(50)
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdtime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("firstname");

                    b.Property<string>("IDToken")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("idtoken");

                    b.Property<DateTime?>("IDTokenExpireDate")
                        .HasMaxLength(50)
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("idtokenexpiredate");

                    b.Property<bool>("IsVerify")
                        .HasMaxLength(20)
                        .HasColumnType("boolean")
                        .HasColumnName("isverify");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasMaxLength(50)
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modifiedtime");

                    b.Property<DateTime?>("OptCreatedDate")
                        .HasMaxLength(50)
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("otpcreateddate");

                    b.Property<string>("OtpCode")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("otpcode");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("passwordhash");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "ilkinsuleymanov200@gmail.com",
                            FullName = "Ilkin  Suleymanov",
                            IsVerify = true,
                            PasswordHash = new byte[] { 102, 64, 139, 87, 45, 137, 206, 127, 248, 102, 6, 75, 143, 37, 102, 6, 166, 5, 101, 71, 226, 17, 44, 182, 214, 227, 215, 99, 89, 243, 26, 144, 184, 229, 72, 9, 4, 95, 245, 77, 231, 87, 220, 105, 47, 100, 102, 243, 67, 186, 33, 227, 210, 212, 80, 233, 31, 59, 14, 218, 17, 61, 196, 231 },
                            PasswordSalt = new byte[] { 77, 6, 138, 193, 242, 38, 236, 207, 255, 107, 120, 26, 158, 125, 172, 171, 144, 138, 243, 247, 38, 78, 67, 162, 196, 204, 46, 123, 168, 195, 74, 162, 38, 5, 135, 17, 153, 250, 8, 184, 44, 149, 77, 151, 243, 27, 153, 39, 51, 218, 62, 255, 93, 57, 198, 6, 219, 66, 209, 245, 7, 91, 172, 106, 138, 221, 240, 44, 82, 87, 153, 80, 251, 198, 252, 232, 44, 37, 90, 145, 33, 170, 98, 232, 45, 4, 64, 199, 206, 124, 107, 5, 29, 12, 189, 206, 241, 74, 118, 129, 85, 222, 11, 118, 244, 31, 60, 41, 13, 1, 6, 22, 16, 142, 52, 130, 239, 135, 225, 178, 56, 217, 174, 68, 44, 12, 241, 119 },
                            Status = false
                        });
                });

            modelBuilder.Entity("Core.Security.Entities.UserLoginSecurity", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userid");

                    b.Property<DateTime?>("AccountBlockedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("AccountBlockedTime");

                    b.Property<DateTime?>("AccountUnblockedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("AccountUnBlockedTime");

                    b.Property<bool>("IsAccountBlock")
                        .HasMaxLength(5)
                        .HasColumnType("boolean")
                        .HasColumnName("isBlock");

                    b.Property<int>("LoginRetryCount")
                        .HasMaxLength(2)
                        .HasColumnType("integer")
                        .HasColumnName("LoginRetryCount");

                    b.HasKey("UserId");

                    b.ToTable("UserLoginSecurities", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            IsAccountBlock = false,
                            LoginRetryCount = 0
                        });
                });

            modelBuilder.Entity("Core.Security.Entities.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userid");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("roleid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("userroles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Goverment.Core.Security.Entities.Audit.UserAudit", b =>
                {
                    b.Property<int>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AuditId"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Method")
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AuditId");

                    b.ToTable("UserAudits");
                });

            modelBuilder.Entity("Goverment.Core.Security.Entities.UserOtpSecurity", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("userid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<int>("TryOtpCount")
                        .HasMaxLength(2)
                        .HasColumnType("integer")
                        .HasColumnName("tryotpcount");

                    b.Property<int>("UserId1")
                        .HasColumnType("integer");

                    b.HasKey("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("UserOtpSecurities", (string)null);
                });

            modelBuilder.Entity("Goverment.Core.Security.Entities.UserResendOtpSecurity", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userid");

                    b.Property<bool>("IsLock")
                        .HasMaxLength(5)
                        .HasColumnType("boolean")
                        .HasColumnName("islock");

                    b.Property<int>("TryOtpCount")
                        .HasMaxLength(2)
                        .HasColumnType("integer")
                        .HasColumnName("tryotpcount");

                    b.Property<DateTime?>("unBlockDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("unblockdate");

                    b.HasKey("UserId");

                    b.ToTable("UserResendOtpSecurities", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            IsLock = false,
                            TryOtpCount = 0
                        });
                });

            modelBuilder.Entity("Core.Security.Entities.UserLoginSecurity", b =>
                {
                    b.HasOne("Core.Security.Entities.User", "User")
                        .WithOne("UserLoginSecurity")
                        .HasForeignKey("Core.Security.Entities.UserLoginSecurity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Security.Entities.UserRole", b =>
                {
                    b.HasOne("Core.Security.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Security.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Goverment.Core.Security.Entities.UserOtpSecurity", b =>
                {
                    b.HasOne("Core.Security.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Goverment.Core.Security.Entities.UserResendOtpSecurity", b =>
                {
                    b.HasOne("Core.Security.Entities.User", "User")
                        .WithOne("UserResendOtpSecurity")
                        .HasForeignKey("Goverment.Core.Security.Entities.UserResendOtpSecurity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Security.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Core.Security.Entities.User", b =>
                {
                    b.Navigation("UserLoginSecurity")
                        .IsRequired();

                    b.Navigation("UserResendOtpSecurity")
                        .IsRequired();

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
